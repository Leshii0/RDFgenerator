//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from F:\temp\RDFCompiler\RDFCompiler\Gramm.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace RDFCompiler {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class GrammParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		BOOL_OPERATOR=25, INTEGER=26, DOUBLE=27, STRING=28, BOOL=29, NULL=30, 
		NEW=31, TYPE=32, WS=33, IDENTIFIER=34;
	public const int
		RULE_program = 0, RULE_line = 1, RULE_statement = 2, RULE_ifBlock = 3, 
		RULE_elseIfBlock = 4, RULE_whileBlock = 5, RULE_assingment = 6, RULE_propMember = 7, 
		RULE_class_constructor = 8, RULE_typeDeclaration = 9, RULE_enumeration = 10, 
		RULE_functionCall = 11, RULE_newClass = 12, RULE_expression = 13, RULE_multOp = 14, 
		RULE_addOp = 15, RULE_compareOp = 16, RULE_boolOp = 17, RULE_constant = 18, 
		RULE_block = 19;
	public static readonly string[] ruleNames = {
		"program", "line", "statement", "ifBlock", "elseIfBlock", "whileBlock", 
		"assingment", "propMember", "class_constructor", "typeDeclaration", "enumeration", 
		"functionCall", "newClass", "expression", "multOp", "addOp", "compareOp", 
		"boolOp", "constant", "block"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'if'", "'('", "')'", "'else'", "'while'", "'='", "'.'", 
		"','", "'typeof'", "'|'", "'!'", "'*'", "'/'", "'+'", "'-'", "'=='", "'!='", 
		"'>'", "'<'", "'>='", "'<='", "'{'", "'}'", null, null, null, null, null, 
		"'null'", "'new'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "BOOL_OPERATOR", "INTEGER", "DOUBLE", "STRING", "BOOL", "NULL", 
		"NEW", "TYPE", "WS", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Gramm.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public GrammParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(GrammParser.Eof, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammVisitor<TResult> typedVisitor = visitor as IGrammVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__5) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 40; line();
				}
				}
				State = 45;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 46; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public WhileBlockContext whileBlock() {
			return GetRuleContext<WhileBlockContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammVisitor<TResult> typedVisitor = visitor as IGrammVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_line);
		try {
			State = 51;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48; statement();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 49; ifBlock();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 3);
				{
				State = 50; whileBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public AssingmentContext assingment() {
			return GetRuleContext<AssingmentContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammVisitor<TResult> typedVisitor = visitor as IGrammVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
			case 1:
				{
				State = 53; assingment();
				}
				break;

			case 2:
				{
				State = 54; functionCall();
				}
				break;
			}
			State = 57; Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ElseIfBlockContext elseIfBlock() {
			return GetRuleContext<ElseIfBlockContext>(0);
		}
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.EnterIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.ExitIfBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammVisitor<TResult> typedVisitor = visitor as IGrammVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_ifBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59; Match(T__1);
			State = 60; Match(T__2);
			State = 61; expression(0);
			State = 62; Match(T__3);
			State = 63; block();
			State = 66;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__4) {
				{
				State = 64; Match(T__4);
				State = 65; elseIfBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfBlockContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public ElseIfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.EnterElseIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.ExitElseIfBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammVisitor<TResult> typedVisitor = visitor as IGrammVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfBlockContext elseIfBlock() {
		ElseIfBlockContext _localctx = new ElseIfBlockContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_elseIfBlock);
		try {
			State = 70;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case T__22:
				EnterOuterAlt(_localctx, 1);
				{
				State = 68; block();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 69; ifBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileBlockContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public WhileBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.EnterWhileBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.ExitWhileBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammVisitor<TResult> typedVisitor = visitor as IGrammVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileBlockContext whileBlock() {
		WhileBlockContext _localctx = new WhileBlockContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_whileBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; Match(T__5);
			State = 73; Match(T__2);
			State = 74; expression(0);
			State = 75; Match(T__3);
			State = 76; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssingmentContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(GrammParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(GrammParser.IDENTIFIER, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NewClassContext newClass() {
			return GetRuleContext<NewClassContext>(0);
		}
		public PropMemberContext propMember() {
			return GetRuleContext<PropMemberContext>(0);
		}
		public EnumerationContext enumeration() {
			return GetRuleContext<EnumerationContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public AssingmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assingment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.EnterAssingment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.ExitAssingment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammVisitor<TResult> typedVisitor = visitor as IGrammVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssingment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssingmentContext assingment() {
		AssingmentContext _localctx = new AssingmentContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_assingment);
		try {
			State = 101;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 78; Match(IDENTIFIER);
				State = 79; Match(T__6);
				State = 80; expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 81; Match(IDENTIFIER);
				State = 82; Match(IDENTIFIER);
				State = 83; Match(T__6);
				State = 84; newClass();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 85; propMember();
				State = 86; Match(T__6);
				State = 87; expression(0);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 89; propMember();
				State = 90; Match(T__6);
				State = 91; enumeration();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 93; propMember();
				State = 94; Match(T__7);
				State = 95; functionCall();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 97; propMember();
				State = 98; Match(T__6);
				State = 99; newClass();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropMemberContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(GrammParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(GrammParser.IDENTIFIER, i);
		}
		public PropMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propMember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.EnterPropMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.ExitPropMember(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammVisitor<TResult> typedVisitor = visitor as IGrammVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropMemberContext propMember() {
		PropMemberContext _localctx = new PropMemberContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_propMember);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103; Match(IDENTIFIER);
			State = 104; Match(T__7);
			State = 105; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_constructorContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GrammParser.IDENTIFIER, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode TYPE() { return GetToken(GrammParser.TYPE, 0); }
		public Class_constructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_constructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.EnterClass_constructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.ExitClass_constructor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammVisitor<TResult> typedVisitor = visitor as IGrammVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_constructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_constructorContext class_constructor() {
		Class_constructorContext _localctx = new Class_constructorContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_class_constructor);
		int _la;
		try {
			State = 129;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 107; Match(IDENTIFIER);
				State = 108; Match(T__2);
				State = 117;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__11) | (1L << INTEGER) | (1L << DOUBLE) | (1L << STRING) | (1L << BOOL) | (1L << NULL) | (1L << IDENTIFIER))) != 0)) {
					{
					State = 109; expression(0);
					State = 114;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==T__8) {
						{
						{
						State = 110; Match(T__8);
						State = 111; expression(0);
						}
						}
						State = 116;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
				}

				State = 119; Match(T__3);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 120; Match(IDENTIFIER);
				State = 121; Match(T__2);
				State = 126;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==T__9) {
					{
					State = 122; Match(T__9);
					State = 123; Match(T__2);
					State = 124; Match(TYPE);
					State = 125; Match(T__3);
					}
				}

				State = 128; Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		public ITerminalNode TYPE() { return GetToken(GrammParser.TYPE, 0); }
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammVisitor<TResult> typedVisitor = visitor as IGrammVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_typeDeclaration);
		try {
			State = 136;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TYPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 131; Match(TYPE);
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132; Match(T__9);
				State = 133; Match(T__2);
				State = 134; Match(TYPE);
				State = 135; Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumerationContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EnumerationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.EnterEnumeration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.ExitEnumeration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammVisitor<TResult> typedVisitor = visitor as IGrammVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumeration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumerationContext enumeration() {
		EnumerationContext _localctx = new EnumerationContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_enumeration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; expression(0);
			State = 146;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				{
				State = 143;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__10) {
					{
					{
					State = 139; Match(T__10);
					State = 140; expression(0);
					}
					}
					State = 145;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GrammParser.IDENTIFIER, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammVisitor<TResult> typedVisitor = visitor as IGrammVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; Match(IDENTIFIER);
			State = 149; Match(T__2);
			State = 158;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__11) | (1L << INTEGER) | (1L << DOUBLE) | (1L << STRING) | (1L << BOOL) | (1L << NULL) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 150; expression(0);
				State = 155;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__8) {
					{
					{
					State = 151; Match(T__8);
					State = 152; expression(0);
					}
					}
					State = 157;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 160; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewClassContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(GrammParser.NEW, 0); }
		public Class_constructorContext class_constructor() {
			return GetRuleContext<Class_constructorContext>(0);
		}
		public NewClassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newClass; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.EnterNewClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.ExitNewClass(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammVisitor<TResult> typedVisitor = visitor as IGrammVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewClass(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NewClassContext newClass() {
		NewClassContext _localctx = new NewClassContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_newClass);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; Match(NEW);
			State = 163; class_constructor();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CompareExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CompareOpContext compareOp() {
			return GetRuleContext<CompareOpContext>(0);
		}
		public CompareExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.EnterCompareExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.ExitCompareExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammVisitor<TResult> typedVisitor = visitor as IGrammVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantExpressionContext : ExpressionContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammVisitor<TResult> typedVisitor = visitor as IGrammVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AddOpContext addOp() {
			return GetRuleContext<AddOpContext>(0);
		}
		public AddExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.EnterAddExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.ExitAddExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammVisitor<TResult> typedVisitor = visitor as IGrammVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BoolOpContext boolOp() {
			return GetRuleContext<BoolOpContext>(0);
		}
		public BoolExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.EnterBoolExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.ExitBoolExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammVisitor<TResult> typedVisitor = visitor as IGrammVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GrammParser.IDENTIFIER, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammVisitor<TResult> typedVisitor = visitor as IGrammVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultOpContext multOp() {
			return GetRuleContext<MultOpContext>(0);
		}
		public MultiExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.EnterMultiExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.ExitMultiExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammVisitor<TResult> typedVisitor = visitor as IGrammVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammVisitor<TResult> typedVisitor = visitor as IGrammVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BracketsExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BracketsExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.EnterBracketsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.ExitBracketsExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammVisitor<TResult> typedVisitor = visitor as IGrammVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammVisitor<TResult> typedVisitor = visitor as IGrammVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PropertyExpressionContext : ExpressionContext {
		public PropMemberContext propMember() {
			return GetRuleContext<PropMemberContext>(0);
		}
		public PropertyExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.EnterPropertyExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.ExitPropertyExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammVisitor<TResult> typedVisitor = visitor as IGrammVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPropertyExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				{
				_localctx = new ConstantExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 166; constant();
				}
				break;

			case 2:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 167; Match(IDENTIFIER);
				}
				break;

			case 3:
				{
				_localctx = new PropertyExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 168; propMember();
				}
				break;

			case 4:
				{
				_localctx = new FunctionCallExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 169; functionCall();
				}
				break;

			case 5:
				{
				_localctx = new BracketsExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 170; Match(T__2);
				State = 171; expression(0);
				State = 172; Match(T__3);
				}
				break;

			case 6:
				{
				_localctx = new NotExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 174; Match(T__11);
				State = 175; expression(5);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 196;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 194;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,16,_ctx) ) {
					case 1:
						{
						_localctx = new MultiExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 178;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 179; multOp();
						State = 180; expression(5);
						}
						break;

					case 2:
						{
						_localctx = new AddExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 182;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 183; addOp();
						State = 184; expression(4);
						}
						break;

					case 3:
						{
						_localctx = new CompareExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 186;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 187; compareOp();
						State = 188; expression(3);
						}
						break;

					case 4:
						{
						_localctx = new BoolExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 190;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 191; boolOp();
						State = 192; expression(2);
						}
						break;
					}
					} 
				}
				State = 198;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultOpContext : ParserRuleContext {
		public MultOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.EnterMultOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.ExitMultOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammVisitor<TResult> typedVisitor = visitor as IGrammVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultOpContext multOp() {
		MultOpContext _localctx = new MultOpContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_multOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			_la = _input.La(1);
			if ( !(_la==T__12 || _la==T__13) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOpContext : ParserRuleContext {
		public AddOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.EnterAddOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.ExitAddOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammVisitor<TResult> typedVisitor = visitor as IGrammVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOpContext addOp() {
		AddOpContext _localctx = new AddOpContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_addOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			_la = _input.La(1);
			if ( !(_la==T__14 || _la==T__15) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareOpContext : ParserRuleContext {
		public CompareOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.EnterCompareOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.ExitCompareOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammVisitor<TResult> typedVisitor = visitor as IGrammVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareOpContext compareOp() {
		CompareOpContext _localctx = new CompareOpContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_compareOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolOpContext : ParserRuleContext {
		public ITerminalNode BOOL_OPERATOR() { return GetToken(GrammParser.BOOL_OPERATOR, 0); }
		public BoolOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.EnterBoolOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.ExitBoolOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammVisitor<TResult> typedVisitor = visitor as IGrammVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolOpContext boolOp() {
		BoolOpContext _localctx = new BoolOpContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_boolOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 205; Match(BOOL_OPERATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(GrammParser.INTEGER, 0); }
		public ITerminalNode DOUBLE() { return GetToken(GrammParser.DOUBLE, 0); }
		public ITerminalNode STRING() { return GetToken(GrammParser.STRING, 0); }
		public ITerminalNode BOOL() { return GetToken(GrammParser.BOOL, 0); }
		public ITerminalNode NULL() { return GetToken(GrammParser.NULL, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammVisitor<TResult> typedVisitor = visitor as IGrammVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << DOUBLE) | (1L << STRING) | (1L << BOOL) | (1L << NULL))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammListener typedListener = listener as IGrammListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammVisitor<TResult> typedVisitor = visitor as IGrammVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209; Match(T__22);
			State = 213;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__5) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 210; line();
				}
				}
				State = 215;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 216; Match(T__23);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 13: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 4);

		case 1: return Precpred(_ctx, 3);

		case 2: return Precpred(_ctx, 2);

		case 3: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3$\xDD\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x3\x2\a\x2,\n\x2\f\x2\xE\x2/\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x5\x3"+
		"\x36\n\x3\x3\x4\x3\x4\x5\x4:\n\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x5\x5\x45\n\x5\x3\x6\x3\x6\x5\x6I\n\x6\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x5\bh\n"+
		"\b\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3\n\a\ns\n\n\f\n\xE\nv\v\n"+
		"\x5\nx\n\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\x81\n\n\x3\n\x5\n\x84"+
		"\n\n\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\x8B\n\v\x3\f\x3\f\x3\f\a\f\x90\n\f"+
		"\f\f\xE\f\x93\v\f\x5\f\x95\n\f\x3\r\x3\r\x3\r\x3\r\x3\r\a\r\x9C\n\r\f"+
		"\r\xE\r\x9F\v\r\x5\r\xA1\n\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\xB3\n\xF\x3"+
		"\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\a\xF\xC5\n\xF\f\xF\xE\xF\xC8\v\xF\x3\x10\x3\x10"+
		"\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15"+
		"\a\x15\xD6\n\x15\f\x15\xE\x15\xD9\v\x15\x3\x15\x3\x15\x3\x15\x2\x2\x3"+
		"\x1C\x16\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16"+
		"\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2\x2\x6\x3\x2\xF\x10"+
		"\x3\x2\x11\x12\x3\x2\x13\x18\x3\x2\x1C \xE6\x2-\x3\x2\x2\x2\x4\x35\x3"+
		"\x2\x2\x2\x6\x39\x3\x2\x2\x2\b=\x3\x2\x2\x2\nH\x3\x2\x2\x2\fJ\x3\x2\x2"+
		"\x2\xEg\x3\x2\x2\x2\x10i\x3\x2\x2\x2\x12\x83\x3\x2\x2\x2\x14\x8A\x3\x2"+
		"\x2\x2\x16\x8C\x3\x2\x2\x2\x18\x96\x3\x2\x2\x2\x1A\xA4\x3\x2\x2\x2\x1C"+
		"\xB2\x3\x2\x2\x2\x1E\xC9\x3\x2\x2\x2 \xCB\x3\x2\x2\x2\"\xCD\x3\x2\x2\x2"+
		"$\xCF\x3\x2\x2\x2&\xD1\x3\x2\x2\x2(\xD3\x3\x2\x2\x2*,\x5\x4\x3\x2+*\x3"+
		"\x2\x2\x2,/\x3\x2\x2\x2-+\x3\x2\x2\x2-.\x3\x2\x2\x2.\x30\x3\x2\x2\x2/"+
		"-\x3\x2\x2\x2\x30\x31\a\x2\x2\x3\x31\x3\x3\x2\x2\x2\x32\x36\x5\x6\x4\x2"+
		"\x33\x36\x5\b\x5\x2\x34\x36\x5\f\a\x2\x35\x32\x3\x2\x2\x2\x35\x33\x3\x2"+
		"\x2\x2\x35\x34\x3\x2\x2\x2\x36\x5\x3\x2\x2\x2\x37:\x5\xE\b\x2\x38:\x5"+
		"\x18\r\x2\x39\x37\x3\x2\x2\x2\x39\x38\x3\x2\x2\x2:;\x3\x2\x2\x2;<\a\x3"+
		"\x2\x2<\a\x3\x2\x2\x2=>\a\x4\x2\x2>?\a\x5\x2\x2?@\x5\x1C\xF\x2@\x41\a"+
		"\x6\x2\x2\x41\x44\x5(\x15\x2\x42\x43\a\a\x2\x2\x43\x45\x5\n\x6\x2\x44"+
		"\x42\x3\x2\x2\x2\x44\x45\x3\x2\x2\x2\x45\t\x3\x2\x2\x2\x46I\x5(\x15\x2"+
		"GI\x5\b\x5\x2H\x46\x3\x2\x2\x2HG\x3\x2\x2\x2I\v\x3\x2\x2\x2JK\a\b\x2\x2"+
		"KL\a\x5\x2\x2LM\x5\x1C\xF\x2MN\a\x6\x2\x2NO\x5(\x15\x2O\r\x3\x2\x2\x2"+
		"PQ\a$\x2\x2QR\a\t\x2\x2Rh\x5\x1C\xF\x2ST\a$\x2\x2TU\a$\x2\x2UV\a\t\x2"+
		"\x2Vh\x5\x1A\xE\x2WX\x5\x10\t\x2XY\a\t\x2\x2YZ\x5\x1C\xF\x2Zh\x3\x2\x2"+
		"\x2[\\\x5\x10\t\x2\\]\a\t\x2\x2]^\x5\x16\f\x2^h\x3\x2\x2\x2_`\x5\x10\t"+
		"\x2`\x61\a\n\x2\x2\x61\x62\x5\x18\r\x2\x62h\x3\x2\x2\x2\x63\x64\x5\x10"+
		"\t\x2\x64\x65\a\t\x2\x2\x65\x66\x5\x1A\xE\x2\x66h\x3\x2\x2\x2gP\x3\x2"+
		"\x2\x2gS\x3\x2\x2\x2gW\x3\x2\x2\x2g[\x3\x2\x2\x2g_\x3\x2\x2\x2g\x63\x3"+
		"\x2\x2\x2h\xF\x3\x2\x2\x2ij\a$\x2\x2jk\a\n\x2\x2kl\a$\x2\x2l\x11\x3\x2"+
		"\x2\x2mn\a$\x2\x2nw\a\x5\x2\x2ot\x5\x1C\xF\x2pq\a\v\x2\x2qs\x5\x1C\xF"+
		"\x2rp\x3\x2\x2\x2sv\x3\x2\x2\x2tr\x3\x2\x2\x2tu\x3\x2\x2\x2ux\x3\x2\x2"+
		"\x2vt\x3\x2\x2\x2wo\x3\x2\x2\x2wx\x3\x2\x2\x2xy\x3\x2\x2\x2y\x84\a\x6"+
		"\x2\x2z{\a$\x2\x2{\x80\a\x5\x2\x2|}\a\f\x2\x2}~\a\x5\x2\x2~\x7F\a\"\x2"+
		"\x2\x7F\x81\a\x6\x2\x2\x80|\x3\x2\x2\x2\x80\x81\x3\x2\x2\x2\x81\x82\x3"+
		"\x2\x2\x2\x82\x84\a\x6\x2\x2\x83m\x3\x2\x2\x2\x83z\x3\x2\x2\x2\x84\x13"+
		"\x3\x2\x2\x2\x85\x8B\a\"\x2\x2\x86\x87\a\f\x2\x2\x87\x88\a\x5\x2\x2\x88"+
		"\x89\a\"\x2\x2\x89\x8B\a\x6\x2\x2\x8A\x85\x3\x2\x2\x2\x8A\x86\x3\x2\x2"+
		"\x2\x8B\x15\x3\x2\x2\x2\x8C\x94\x5\x1C\xF\x2\x8D\x8E\a\r\x2\x2\x8E\x90"+
		"\x5\x1C\xF\x2\x8F\x8D\x3\x2\x2\x2\x90\x93\x3\x2\x2\x2\x91\x8F\x3\x2\x2"+
		"\x2\x91\x92\x3\x2\x2\x2\x92\x95\x3\x2\x2\x2\x93\x91\x3\x2\x2\x2\x94\x91"+
		"\x3\x2\x2\x2\x94\x95\x3\x2\x2\x2\x95\x17\x3\x2\x2\x2\x96\x97\a$\x2\x2"+
		"\x97\xA0\a\x5\x2\x2\x98\x9D\x5\x1C\xF\x2\x99\x9A\a\v\x2\x2\x9A\x9C\x5"+
		"\x1C\xF\x2\x9B\x99\x3\x2\x2\x2\x9C\x9F\x3\x2\x2\x2\x9D\x9B\x3\x2\x2\x2"+
		"\x9D\x9E\x3\x2\x2\x2\x9E\xA1\x3\x2\x2\x2\x9F\x9D\x3\x2\x2\x2\xA0\x98\x3"+
		"\x2\x2\x2\xA0\xA1\x3\x2\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2\xA3\a\x6\x2\x2\xA3"+
		"\x19\x3\x2\x2\x2\xA4\xA5\a!\x2\x2\xA5\xA6\x5\x12\n\x2\xA6\x1B\x3\x2\x2"+
		"\x2\xA7\xA8\b\xF\x1\x2\xA8\xB3\x5&\x14\x2\xA9\xB3\a$\x2\x2\xAA\xB3\x5"+
		"\x10\t\x2\xAB\xB3\x5\x18\r\x2\xAC\xAD\a\x5\x2\x2\xAD\xAE\x5\x1C\xF\x2"+
		"\xAE\xAF\a\x6\x2\x2\xAF\xB3\x3\x2\x2\x2\xB0\xB1\a\xE\x2\x2\xB1\xB3\x5"+
		"\x1C\xF\a\xB2\xA7\x3\x2\x2\x2\xB2\xA9\x3\x2\x2\x2\xB2\xAA\x3\x2\x2\x2"+
		"\xB2\xAB\x3\x2\x2\x2\xB2\xAC\x3\x2\x2\x2\xB2\xB0\x3\x2\x2\x2\xB3\xC6\x3"+
		"\x2\x2\x2\xB4\xB5\f\x6\x2\x2\xB5\xB6\x5\x1E\x10\x2\xB6\xB7\x5\x1C\xF\a"+
		"\xB7\xC5\x3\x2\x2\x2\xB8\xB9\f\x5\x2\x2\xB9\xBA\x5 \x11\x2\xBA\xBB\x5"+
		"\x1C\xF\x6\xBB\xC5\x3\x2\x2\x2\xBC\xBD\f\x4\x2\x2\xBD\xBE\x5\"\x12\x2"+
		"\xBE\xBF\x5\x1C\xF\x5\xBF\xC5\x3\x2\x2\x2\xC0\xC1\f\x3\x2\x2\xC1\xC2\x5"+
		"$\x13\x2\xC2\xC3\x5\x1C\xF\x4\xC3\xC5\x3\x2\x2\x2\xC4\xB4\x3\x2\x2\x2"+
		"\xC4\xB8\x3\x2\x2\x2\xC4\xBC\x3\x2\x2\x2\xC4\xC0\x3\x2\x2\x2\xC5\xC8\x3"+
		"\x2\x2\x2\xC6\xC4\x3\x2\x2\x2\xC6\xC7\x3\x2\x2\x2\xC7\x1D\x3\x2\x2\x2"+
		"\xC8\xC6\x3\x2\x2\x2\xC9\xCA\t\x2\x2\x2\xCA\x1F\x3\x2\x2\x2\xCB\xCC\t"+
		"\x3\x2\x2\xCC!\x3\x2\x2\x2\xCD\xCE\t\x4\x2\x2\xCE#\x3\x2\x2\x2\xCF\xD0"+
		"\a\x1B\x2\x2\xD0%\x3\x2\x2\x2\xD1\xD2\t\x5\x2\x2\xD2\'\x3\x2\x2\x2\xD3"+
		"\xD7\a\x19\x2\x2\xD4\xD6\x5\x4\x3\x2\xD5\xD4\x3\x2\x2\x2\xD6\xD9\x3\x2"+
		"\x2\x2\xD7\xD5\x3\x2\x2\x2\xD7\xD8\x3\x2\x2\x2\xD8\xDA\x3\x2\x2\x2\xD9"+
		"\xD7\x3\x2\x2\x2\xDA\xDB\a\x1A\x2\x2\xDB)\x3\x2\x2\x2\x15-\x35\x39\x44"+
		"Hgtw\x80\x83\x8A\x91\x94\x9D\xA0\xB2\xC4\xC6\xD7";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace RDFCompiler
