//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from F:\temp\RDFCompiler\RDFCompiler\Gramm.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace RDFCompiler {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="GrammParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public interface IGrammVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by the <c>compareExpression</c>
	/// labeled alternative in <see cref="GrammParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCompareExpression([NotNull] GrammParser.CompareExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>constantExpression</c>
	/// labeled alternative in <see cref="GrammParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstantExpression([NotNull] GrammParser.ConstantExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>addExpression</c>
	/// labeled alternative in <see cref="GrammParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAddExpression([NotNull] GrammParser.AddExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>boolExpression</c>
	/// labeled alternative in <see cref="GrammParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBoolExpression([NotNull] GrammParser.BoolExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>identifierExpression</c>
	/// labeled alternative in <see cref="GrammParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdentifierExpression([NotNull] GrammParser.IdentifierExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>multiExpression</c>
	/// labeled alternative in <see cref="GrammParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMultiExpression([NotNull] GrammParser.MultiExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>functionCallExpression</c>
	/// labeled alternative in <see cref="GrammParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionCallExpression([NotNull] GrammParser.FunctionCallExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>bracketsExpression</c>
	/// labeled alternative in <see cref="GrammParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBracketsExpression([NotNull] GrammParser.BracketsExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>notExpression</c>
	/// labeled alternative in <see cref="GrammParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNotExpression([NotNull] GrammParser.NotExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>propertyExpression</c>
	/// labeled alternative in <see cref="GrammParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPropertyExpression([NotNull] GrammParser.PropertyExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GrammParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProgram([NotNull] GrammParser.ProgramContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GrammParser.line"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLine([NotNull] GrammParser.LineContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GrammParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement([NotNull] GrammParser.StatementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GrammParser.ifBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfBlock([NotNull] GrammParser.IfBlockContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GrammParser.elseIfBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitElseIfBlock([NotNull] GrammParser.ElseIfBlockContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GrammParser.whileBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhileBlock([NotNull] GrammParser.WhileBlockContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GrammParser.assingment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssingment([NotNull] GrammParser.AssingmentContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GrammParser.propMember"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPropMember([NotNull] GrammParser.PropMemberContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GrammParser.class_constructor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitClass_constructor([NotNull] GrammParser.Class_constructorContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GrammParser.typeDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTypeDeclaration([NotNull] GrammParser.TypeDeclarationContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GrammParser.enumeration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEnumeration([NotNull] GrammParser.EnumerationContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GrammParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionCall([NotNull] GrammParser.FunctionCallContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GrammParser.newClass"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNewClass([NotNull] GrammParser.NewClassContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GrammParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpression([NotNull] GrammParser.ExpressionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GrammParser.multOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMultOp([NotNull] GrammParser.MultOpContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GrammParser.addOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAddOp([NotNull] GrammParser.AddOpContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GrammParser.compareOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCompareOp([NotNull] GrammParser.CompareOpContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GrammParser.boolOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBoolOp([NotNull] GrammParser.BoolOpContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GrammParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstant([NotNull] GrammParser.ConstantContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="GrammParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBlock([NotNull] GrammParser.BlockContext context);
}
} // namespace RDFCompiler
