//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from F:\temp\RDFCompiler\RDFCompiler\Gramm.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace RDFCompiler {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="GrammParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public interface IGrammListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>compareExpression</c>
	/// labeled alternative in <see cref="GrammParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCompareExpression([NotNull] GrammParser.CompareExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>compareExpression</c>
	/// labeled alternative in <see cref="GrammParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCompareExpression([NotNull] GrammParser.CompareExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>constantExpression</c>
	/// labeled alternative in <see cref="GrammParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstantExpression([NotNull] GrammParser.ConstantExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>constantExpression</c>
	/// labeled alternative in <see cref="GrammParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstantExpression([NotNull] GrammParser.ConstantExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>addExpression</c>
	/// labeled alternative in <see cref="GrammParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddExpression([NotNull] GrammParser.AddExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>addExpression</c>
	/// labeled alternative in <see cref="GrammParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddExpression([NotNull] GrammParser.AddExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>boolExpression</c>
	/// labeled alternative in <see cref="GrammParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolExpression([NotNull] GrammParser.BoolExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>boolExpression</c>
	/// labeled alternative in <see cref="GrammParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolExpression([NotNull] GrammParser.BoolExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>identifierExpression</c>
	/// labeled alternative in <see cref="GrammParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierExpression([NotNull] GrammParser.IdentifierExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>identifierExpression</c>
	/// labeled alternative in <see cref="GrammParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierExpression([NotNull] GrammParser.IdentifierExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>multiExpression</c>
	/// labeled alternative in <see cref="GrammParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultiExpression([NotNull] GrammParser.MultiExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>multiExpression</c>
	/// labeled alternative in <see cref="GrammParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultiExpression([NotNull] GrammParser.MultiExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>functionCallExpression</c>
	/// labeled alternative in <see cref="GrammParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCallExpression([NotNull] GrammParser.FunctionCallExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>functionCallExpression</c>
	/// labeled alternative in <see cref="GrammParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCallExpression([NotNull] GrammParser.FunctionCallExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>bracketsExpression</c>
	/// labeled alternative in <see cref="GrammParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBracketsExpression([NotNull] GrammParser.BracketsExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>bracketsExpression</c>
	/// labeled alternative in <see cref="GrammParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBracketsExpression([NotNull] GrammParser.BracketsExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>notExpression</c>
	/// labeled alternative in <see cref="GrammParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotExpression([NotNull] GrammParser.NotExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>notExpression</c>
	/// labeled alternative in <see cref="GrammParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotExpression([NotNull] GrammParser.NotExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>propertyExpression</c>
	/// labeled alternative in <see cref="GrammParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropertyExpression([NotNull] GrammParser.PropertyExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>propertyExpression</c>
	/// labeled alternative in <see cref="GrammParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropertyExpression([NotNull] GrammParser.PropertyExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] GrammParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] GrammParser.ProgramContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammParser.line"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLine([NotNull] GrammParser.LineContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammParser.line"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLine([NotNull] GrammParser.LineContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] GrammParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] GrammParser.StatementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammParser.ifBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfBlock([NotNull] GrammParser.IfBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammParser.ifBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfBlock([NotNull] GrammParser.IfBlockContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammParser.elseIfBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterElseIfBlock([NotNull] GrammParser.ElseIfBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammParser.elseIfBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitElseIfBlock([NotNull] GrammParser.ElseIfBlockContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammParser.whileBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileBlock([NotNull] GrammParser.WhileBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammParser.whileBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileBlock([NotNull] GrammParser.WhileBlockContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammParser.assingment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssingment([NotNull] GrammParser.AssingmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammParser.assingment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssingment([NotNull] GrammParser.AssingmentContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammParser.propMember"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPropMember([NotNull] GrammParser.PropMemberContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammParser.propMember"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPropMember([NotNull] GrammParser.PropMemberContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammParser.class_constructor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterClass_constructor([NotNull] GrammParser.Class_constructorContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammParser.class_constructor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitClass_constructor([NotNull] GrammParser.Class_constructorContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammParser.typeDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTypeDeclaration([NotNull] GrammParser.TypeDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammParser.typeDeclaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTypeDeclaration([NotNull] GrammParser.TypeDeclarationContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammParser.enumeration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEnumeration([NotNull] GrammParser.EnumerationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammParser.enumeration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEnumeration([NotNull] GrammParser.EnumerationContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunctionCall([NotNull] GrammParser.FunctionCallContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunctionCall([NotNull] GrammParser.FunctionCallContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammParser.newClass"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNewClass([NotNull] GrammParser.NewClassContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammParser.newClass"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNewClass([NotNull] GrammParser.NewClassContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpression([NotNull] GrammParser.ExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpression([NotNull] GrammParser.ExpressionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammParser.multOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultOp([NotNull] GrammParser.MultOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammParser.multOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultOp([NotNull] GrammParser.MultOpContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammParser.addOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddOp([NotNull] GrammParser.AddOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammParser.addOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddOp([NotNull] GrammParser.AddOpContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammParser.compareOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCompareOp([NotNull] GrammParser.CompareOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammParser.compareOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCompareOp([NotNull] GrammParser.CompareOpContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammParser.boolOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBoolOp([NotNull] GrammParser.BoolOpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammParser.boolOp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBoolOp([NotNull] GrammParser.BoolOpContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConstant([NotNull] GrammParser.ConstantContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammParser.constant"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConstant([NotNull] GrammParser.ConstantContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="GrammParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] GrammParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="GrammParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] GrammParser.BlockContext context);
}
} // namespace RDFCompiler
