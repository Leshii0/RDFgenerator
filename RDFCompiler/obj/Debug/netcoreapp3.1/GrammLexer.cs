//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from F:\temp\RDFCompiler\RDFCompiler\Gramm.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace RDFCompiler {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class GrammLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		BOOL_OPERATOR=25, INTEGER=26, DOUBLE=27, STRING=28, BOOL=29, NULL=30, 
		NEW=31, TYPE=32, WS=33, IDENTIFIER=34;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "BOOL_OPERATOR", 
		"INTEGER", "DOUBLE", "STRING", "BOOL", "NULL", "NEW", "TYPE", "WS", "IDENTIFIER"
	};


	public GrammLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "'if'", "'('", "')'", "'else'", "'while'", "'='", "'.'", 
		"','", "'typeof'", "'|'", "'!'", "'*'", "'/'", "'+'", "'-'", "'=='", "'!='", 
		"'>'", "'<'", "'>='", "'<='", "'{'", "'}'", null, null, null, null, null, 
		"'null'", "'new'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "BOOL_OPERATOR", "INTEGER", "DOUBLE", "STRING", "BOOL", "NULL", 
		"NEW", "TYPE", "WS", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Gramm.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2$\xDA\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3"+
		"\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3"+
		"\b\x3\t\x3\t\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\f\x3\f\x3"+
		"\r\x3\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3\x12\x3"+
		"\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3"+
		"\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3"+
		"\x1A\x3\x1B\x6\x1B\x8C\n\x1B\r\x1B\xE\x1B\x8D\x3\x1C\x6\x1C\x91\n\x1C"+
		"\r\x1C\xE\x1C\x92\x3\x1C\x3\x1C\x6\x1C\x97\n\x1C\r\x1C\xE\x1C\x98\x3\x1D"+
		"\x3\x1D\a\x1D\x9D\n\x1D\f\x1D\xE\x1D\xA0\v\x1D\x3\x1D\x3\x1D\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\xAD\n\x1E"+
		"\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3 \x3 \x3!\x3!\x3!\x3!\x3"+
		"!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x5!\xCB\n!\x3"+
		"\"\x6\"\xCE\n\"\r\"\xE\"\xCF\x3\"\x3\"\x3#\x3#\a#\xD6\n#\f#\xE#\xD9\v"+
		"#\x2\x2\x2$\x3\x2\x3\x5\x2\x4\a\x2\x5\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11"+
		"\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2"+
		"\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15)\x2\x16+\x2\x17-\x2\x18/\x2\x19"+
		"\x31\x2\x1A\x33\x2\x1B\x35\x2\x1C\x37\x2\x1D\x39\x2\x1E;\x2\x1F=\x2 ?"+
		"\x2!\x41\x2\"\x43\x2#\x45\x2$\x3\x2\b\x4\x2((~~\x3\x2\x32;\x3\x2$$\x5"+
		"\x2\v\f\xF\xF\"\"\x5\x2\x43\\\x61\x61\x63|\x6\x2\x32;\x43\\\x61\x61\x63"+
		"|\xE3\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2"+
		"\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2"+
		"\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19"+
		"\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2"+
		"\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)"+
		"\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3"+
		"\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2"+
		"\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2\x41"+
		"\x3\x2\x2\x2\x2\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2\x2\x3G\x3\x2\x2\x2\x5"+
		"I\x3\x2\x2\x2\aL\x3\x2\x2\x2\tN\x3\x2\x2\x2\vP\x3\x2\x2\x2\rU\x3\x2\x2"+
		"\x2\xF[\x3\x2\x2\x2\x11]\x3\x2\x2\x2\x13_\x3\x2\x2\x2\x15\x61\x3\x2\x2"+
		"\x2\x17h\x3\x2\x2\x2\x19j\x3\x2\x2\x2\x1Bl\x3\x2\x2\x2\x1Dn\x3\x2\x2\x2"+
		"\x1Fp\x3\x2\x2\x2!r\x3\x2\x2\x2#t\x3\x2\x2\x2%w\x3\x2\x2\x2\'z\x3\x2\x2"+
		"\x2)|\x3\x2\x2\x2+~\x3\x2\x2\x2-\x81\x3\x2\x2\x2/\x84\x3\x2\x2\x2\x31"+
		"\x86\x3\x2\x2\x2\x33\x88\x3\x2\x2\x2\x35\x8B\x3\x2\x2\x2\x37\x90\x3\x2"+
		"\x2\x2\x39\x9A\x3\x2\x2\x2;\xAC\x3\x2\x2\x2=\xAE\x3\x2\x2\x2?\xB3\x3\x2"+
		"\x2\x2\x41\xCA\x3\x2\x2\x2\x43\xCD\x3\x2\x2\x2\x45\xD3\x3\x2\x2\x2GH\a"+
		"=\x2\x2H\x4\x3\x2\x2\x2IJ\ak\x2\x2JK\ah\x2\x2K\x6\x3\x2\x2\x2LM\a*\x2"+
		"\x2M\b\x3\x2\x2\x2NO\a+\x2\x2O\n\x3\x2\x2\x2PQ\ag\x2\x2QR\an\x2\x2RS\a"+
		"u\x2\x2ST\ag\x2\x2T\f\x3\x2\x2\x2UV\ay\x2\x2VW\aj\x2\x2WX\ak\x2\x2XY\a"+
		"n\x2\x2YZ\ag\x2\x2Z\xE\x3\x2\x2\x2[\\\a?\x2\x2\\\x10\x3\x2\x2\x2]^\a\x30"+
		"\x2\x2^\x12\x3\x2\x2\x2_`\a.\x2\x2`\x14\x3\x2\x2\x2\x61\x62\av\x2\x2\x62"+
		"\x63\a{\x2\x2\x63\x64\ar\x2\x2\x64\x65\ag\x2\x2\x65\x66\aq\x2\x2\x66g"+
		"\ah\x2\x2g\x16\x3\x2\x2\x2hi\a~\x2\x2i\x18\x3\x2\x2\x2jk\a#\x2\x2k\x1A"+
		"\x3\x2\x2\x2lm\a,\x2\x2m\x1C\x3\x2\x2\x2no\a\x31\x2\x2o\x1E\x3\x2\x2\x2"+
		"pq\a-\x2\x2q \x3\x2\x2\x2rs\a/\x2\x2s\"\x3\x2\x2\x2tu\a?\x2\x2uv\a?\x2"+
		"\x2v$\x3\x2\x2\x2wx\a#\x2\x2xy\a?\x2\x2y&\x3\x2\x2\x2z{\a@\x2\x2{(\x3"+
		"\x2\x2\x2|}\a>\x2\x2}*\x3\x2\x2\x2~\x7F\a@\x2\x2\x7F\x80\a?\x2\x2\x80"+
		",\x3\x2\x2\x2\x81\x82\a>\x2\x2\x82\x83\a?\x2\x2\x83.\x3\x2\x2\x2\x84\x85"+
		"\a}\x2\x2\x85\x30\x3\x2\x2\x2\x86\x87\a\x7F\x2\x2\x87\x32\x3\x2\x2\x2"+
		"\x88\x89\t\x2\x2\x2\x89\x34\x3\x2\x2\x2\x8A\x8C\t\x3\x2\x2\x8B\x8A\x3"+
		"\x2\x2\x2\x8C\x8D\x3\x2\x2\x2\x8D\x8B\x3\x2\x2\x2\x8D\x8E\x3\x2\x2\x2"+
		"\x8E\x36\x3\x2\x2\x2\x8F\x91\t\x3\x2\x2\x90\x8F\x3\x2\x2\x2\x91\x92\x3"+
		"\x2\x2\x2\x92\x90\x3\x2\x2\x2\x92\x93\x3\x2\x2\x2\x93\x94\x3\x2\x2\x2"+
		"\x94\x96\a\x30\x2\x2\x95\x97\t\x3\x2\x2\x96\x95\x3\x2\x2\x2\x97\x98\x3"+
		"\x2\x2\x2\x98\x96\x3\x2\x2\x2\x98\x99\x3\x2\x2\x2\x99\x38\x3\x2\x2\x2"+
		"\x9A\x9E\a$\x2\x2\x9B\x9D\n\x4\x2\x2\x9C\x9B\x3\x2\x2\x2\x9D\xA0\x3\x2"+
		"\x2\x2\x9E\x9C\x3\x2\x2\x2\x9E\x9F\x3\x2\x2\x2\x9F\xA1\x3\x2\x2\x2\xA0"+
		"\x9E\x3\x2\x2\x2\xA1\xA2\a$\x2\x2\xA2:\x3\x2\x2\x2\xA3\xA4\av\x2\x2\xA4"+
		"\xA5\at\x2\x2\xA5\xA6\aw\x2\x2\xA6\xAD\ag\x2\x2\xA7\xA8\ah\x2\x2\xA8\xA9"+
		"\a\x63\x2\x2\xA9\xAA\an\x2\x2\xAA\xAB\au\x2\x2\xAB\xAD\ag\x2\x2\xAC\xA3"+
		"\x3\x2\x2\x2\xAC\xA7\x3\x2\x2\x2\xAD<\x3\x2\x2\x2\xAE\xAF\ap\x2\x2\xAF"+
		"\xB0\aw\x2\x2\xB0\xB1\an\x2\x2\xB1\xB2\an\x2\x2\xB2>\x3\x2\x2\x2\xB3\xB4"+
		"\ap\x2\x2\xB4\xB5\ag\x2\x2\xB5\xB6\ay\x2\x2\xB6@\x3\x2\x2\x2\xB7\xB8\a"+
		"u\x2\x2\xB8\xB9\av\x2\x2\xB9\xBA\at\x2\x2\xBA\xBB\ak\x2\x2\xBB\xBC\ap"+
		"\x2\x2\xBC\xCB\ai\x2\x2\xBD\xBE\ak\x2\x2\xBE\xBF\ap\x2\x2\xBF\xCB\av\x2"+
		"\x2\xC0\xC1\a\x66\x2\x2\xC1\xC2\aq\x2\x2\xC2\xC3\aw\x2\x2\xC3\xC4\a\x64"+
		"\x2\x2\xC4\xC5\an\x2\x2\xC5\xCB\ag\x2\x2\xC6\xC7\a\x64\x2\x2\xC7\xC8\a"+
		"q\x2\x2\xC8\xC9\aq\x2\x2\xC9\xCB\an\x2\x2\xCA\xB7\x3\x2\x2\x2\xCA\xBD"+
		"\x3\x2\x2\x2\xCA\xC0\x3\x2\x2\x2\xCA\xC6\x3\x2\x2\x2\xCB\x42\x3\x2\x2"+
		"\x2\xCC\xCE\t\x5\x2\x2\xCD\xCC\x3\x2\x2\x2\xCE\xCF\x3\x2\x2\x2\xCF\xCD"+
		"\x3\x2\x2\x2\xCF\xD0\x3\x2\x2\x2\xD0\xD1\x3\x2\x2\x2\xD1\xD2\b\"\x2\x2"+
		"\xD2\x44\x3\x2\x2\x2\xD3\xD7\t\x6\x2\x2\xD4\xD6\t\a\x2\x2\xD5\xD4\x3\x2"+
		"\x2\x2\xD6\xD9\x3\x2\x2\x2\xD7\xD5\x3\x2\x2\x2\xD7\xD8\x3\x2\x2\x2\xD8"+
		"\x46\x3\x2\x2\x2\xD9\xD7\x3\x2\x2\x2\v\x2\x8D\x92\x98\x9E\xAC\xCA\xCF"+
		"\xD7\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace RDFCompiler
